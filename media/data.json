[
    {
        "name": "simple-token",
        "code": ";; Simple fungible token implementation\n\n(define-fungible-token simple-token)\n\n;; Transfer tokens between accounts\n(define-public (transfer (amount uint) (sender principal) (recipient principal))\n  (let\n    ((balance-sender (ft-get-balance simple-token sender)))\n    (if (>= balance-sender amount)\n        (ft-transfer? simple-token amount sender recipient)\n        (err u1))\n  )\n)\n\n;; Mint new tokens (restricted to contract owner)\n(define-public (mint (amount uint) (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender (contract-owner)) (err u100))\n    (ft-mint? simple-token amount recipient)\n  )\n)"
    },
    {
        "name": "voting-contract",
        "code": ";; Voting smart contract\n\n;; Define data storage\n(define-map votes-map { voter: principal, proposal-id: uint } { voted: bool })\n(define-map proposals-map { proposal-id: uint } { title: (string-utf8 100), vote-count: uint })\n\n;; Track the next proposal ID\n(define-data-var next-proposal-id uint u1)\n\n;; Create a new proposal\n(define-public (create-proposal (title (string-utf8 100)))\n  (let \n    ((proposal-id (var-get next-proposal-id)))\n    (begin\n      (map-set proposals-map { proposal-id: proposal-id } \n                           { title: title, vote-count: u0 })\n      (var-set next-proposal-id (+ proposal-id u1))\n      (ok proposal-id)\n    )\n  )\n)\n\n;; Cast a vote for a proposal\n(define-public (vote-for (proposal-id uint))\n  (let \n    ((voter tx-sender)\n     (proposal-data (map-get? proposals-map { proposal-id: proposal-id }))\n     (vote-data (map-get? votes-map { voter: voter, proposal-id: proposal-id })))\n    \n    ;; Check if proposal exists\n    (asserts! (is-some proposal-data) (err u404))\n    ;; Check if user has already voted\n    (asserts! (or (is-none vote-data) (not (get voted (unwrap-panic vote-data)))) (err u403))\n    \n    (begin\n      ;; Record the vote\n      (map-set votes-map { voter: voter, proposal-id: proposal-id } { voted: true })\n      \n      ;; Increment vote count\n      (let ((current-votes (get vote-count (unwrap-panic proposal-data))))\n        (map-set proposals-map { proposal-id: proposal-id }\n                           { title: (get title (unwrap-panic proposal-data)),\n                             vote-count: (+ current-votes u1) })\n      )\n      (ok true)\n    )\n  )\n)"
    }
]